{"version":3,"sources":["hooks/useDebounce.tsx","components/EditorForm.tsx","components/MarkdownParser.tsx","components/MarkdownEditor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useDebounce","onActivate","dependency","delay","useEffect","timer","setTimeout","clearTimeout","EditorForm","props","Card","className","style","height","Title","Body","Form","Control","as","placeholder","value","onChange","event","target","MarkdownParser","useState","parsed","setParsed","unified","use","remarkParse","remarkRehype","rehypeSanitize","rehypeStringify","process","parsingvalue","then","file","String","error","overflowY","parse","MarkdownEditor","form","setForm","console","log","Container","fluid","Row","Col","md","xs","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAYeA,MAVf,SAAqBC,EAAsBC,EAAmBC,GAC5DC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBL,MACCE,GAEH,OAAO,kBAAMI,aAAaF,MALnB,sBAMDH,GAAc,IANb,CAMkBC,M,uBCYdK,MAjBf,SAAoBC,GAClB,OACE,eAACC,EAAA,EAAD,CAAMC,UAAU,MAAMC,MAAO,CAACC,OAAQ,SAAtC,UACE,cAACH,EAAA,EAAKI,MAAN,qBACA,cAACJ,EAAA,EAAKK,KAAN,UACE,cAACC,EAAA,EAAKC,QAAN,CACEC,GAAG,WACHC,YAAY,WACZC,MAAOX,EAAMW,MACbC,SAAU,SAACC,GAAD,OAAWb,EAAMY,SAASC,EAAMC,OAAOH,QACjDT,UAAU,gB,gDCsBLa,MA3Bf,SAAwBf,GAAkC,IAAD,EAC3BgB,mBAAS,IADkB,mBAChDC,EADgD,KACxCC,EADwC,KAiBvD,OAdAC,cACGC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJH,IAAII,KACJC,QAAQzB,EAAM0B,cACdC,MACC,SAACC,GAAD,OAAUV,EAAUW,OAAOD,OAC3B,SAACE,GAEC,MAAMA,KAKV,eAAC7B,EAAA,EAAD,CAAMC,UAAU,MAAMC,MAAO,CAACC,OAAQ,SAAtC,UACE,cAACH,EAAA,EAAKI,MAAN,uBACA,cAACJ,EAAA,EAAKK,KAAN,CAAWH,MAAO,CAAC4B,UAAW,UAA9B,SACGC,YAAMf,SCxBA,SAASgB,IAAkB,IAAD,EACfjB,mBAAS,IADM,mBAChCkB,EADgC,KAC1BC,EAD0B,KAIvC,OAFA5C,GAAY,kBAAM6C,QAAQC,IAAIH,KAAO,CAACA,GAAO,KAG3C,cAACI,EAAA,EAAD,CAAWC,MAAM,KAAKrC,UAAU,yBAAhC,SACE,eAACsC,EAAA,EAAD,CAAKtC,UAAU,+BAAf,UACE,cAACuC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAhB,SACE,cAAC,EAAD,CAAYhC,MAAOuB,EAAMtB,SAAUuB,MAErC,cAACM,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAhB,SACE,cAAC,EAAD,CAAgBjB,aAAcQ,WCJzBU,MARf,WACE,OACE,qBAAK1C,UAAU,aAAf,SACE,cAAC+B,EAAD,OCMSY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2933c5b3.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\n\r\nfunction useDebounce(onActivate: Function, dependency: any[], delay: number) {\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      onActivate();\r\n    }, delay);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [...(dependency || []), delay]);\r\n}\r\n\r\nexport default useDebounce;\r\n","import React, { useState } from \"react\";\r\nimport { Card, Container, Form, Row, Col } from \"react-bootstrap\";\r\nimport useDebounce from \"../hooks/useDebounce\";\r\n\r\nfunction EditorForm(props: { value: string; onChange: Function }) {\r\n  return (\r\n    <Card className=\"p-3\" style={{height: '600px'}}>\r\n      <Card.Title>Editor</Card.Title>\r\n      <Card.Body>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          placeholder=\"## Title\"\r\n          value={props.value}\r\n          onChange={(event) => props.onChange(event.target.value)}\r\n          className=\"h-100\"\r\n        />\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default EditorForm;\r\n","import { useState } from \"react\";\r\nimport {unified} from 'unified'\r\nimport remarkParse from 'remark-parse'\r\nimport remarkRehype from 'remark-rehype'\r\nimport rehypeSanitize from 'rehype-sanitize'\r\nimport rehypeStringify from 'rehype-stringify'\r\nimport { Card } from \"react-bootstrap\";\r\nimport parse from 'html-react-parser';\r\n\r\nfunction MarkdownParser(props: { parsingvalue: string }) {\r\n  const [parsed, setParsed] = useState('')\r\n\r\n  unified()\r\n    .use(remarkParse)\r\n    .use(remarkRehype)\r\n    .use(rehypeSanitize)\r\n    .use(rehypeStringify)\r\n    .process(props.parsingvalue)\r\n    .then(\r\n      (file) => setParsed(String(file)),\r\n      (error) => {\r\n        // Handle your error here!\r\n        throw error\r\n      }\r\n    )\r\n\r\n  return (\r\n    <Card className=\"p-3\" style={{height: '600px'}}>\r\n      <Card.Title>Markdown</Card.Title>\r\n      <Card.Body style={{overflowY: 'scroll'}}>\r\n        {parse(parsed)}\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default MarkdownParser;\r\n","import React, { useState } from \"react\";\r\nimport { Card, Container, Form, Row, Col } from \"react-bootstrap\";\r\nimport useDebounce from \"../hooks/useDebounce\";\r\nimport EditorForm from \"./EditorForm\";\r\nimport MarkdownParser from \"./MarkdownParser\";\r\n\r\nexport default function MarkdownEditor() {\r\n  const [form, setForm] = useState('');\r\n  useDebounce(() => console.log(form), [form], 200);\r\n\r\n  return (\r\n    <Container fluid=\"lg\" className=\"text-primary p-3 h-100\">\r\n      <Row className=\"g-3 h-100 align-items-center\">\r\n        <Col md={6} xs={12}>\r\n          <EditorForm value={form} onChange={setForm}/>\r\n        </Col>\r\n        <Col md={6} xs={12}>\r\n          <MarkdownParser parsingvalue={form}/>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MarkdownEditor from './components/MarkdownEditor';\n\nfunction App() {\n  return (\n    <div className=\"App vh-100\">\n      <MarkdownEditor/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}